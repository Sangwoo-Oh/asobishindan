import { Component, ViewChild, ChangeDetectorRef, TemplateRef, Directive, HostBinding } from '@angular/core';
import { IgxInputDirective } from '../../../directives/input/input.directive';
import { DisplayDensity } from '../../../core/density';
import { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';
import { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';
import { FilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { DataType } from '../../../data-operations/data-util';
import { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand, IgxStringFilteringOperand } from '../../../data-operations/filtering-condition';
import { Subject } from 'rxjs';
import { IgxListComponent } from '../../../list/public_api';
import { takeUntil } from 'rxjs/operators';
export class IgxExcelStyleLoadingValuesTemplateDirective {
    constructor(template) {
        this.template = template;
    }
}
IgxExcelStyleLoadingValuesTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxExcelStyleLoading]'
            },] }
];
IgxExcelStyleLoadingValuesTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/**
 * A component used for presenting Excel style search UI.
 */
export class IgxExcelStyleSearchComponent {
    constructor(cdr, esf) {
        this.cdr = cdr;
        this.esf = esf;
        this.destroy$ = new Subject();
        /**
         * @hidden @internal
         */
        this.class = 'igx-excel-filter__menu-main';
        esf.loadingStart.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.displayedListData = [];
            this.isLoading = true;
        });
        esf.loadingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.isLoading = false;
            this.refreshSize();
        });
        esf.initialized.pipe(takeUntil(this.destroy$)).subscribe(() => {
            requestAnimationFrame(() => {
                this.searchInput.nativeElement.focus();
            });
        });
        esf.columnChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.virtDir.resetScrollPosition();
        });
        esf.listDataLoaded.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.searchValue ?
                this.clearInput() :
                this.filterListData();
            this.cdr.detectChanges();
        });
    }
    /**
     * @hidden @internal
     */
    get addToCurrentFilter() {
        if (!this._addToCurrentFilter) {
            const addToCurrentFilterItem = {
                isSelected: false,
                isFiltered: false,
                indeterminate: false,
                isSpecial: true,
                isBlanks: false,
                value: this.esf.grid.resourceStrings.igx_grid_excel_add_to_filter,
                label: this.esf.grid.resourceStrings.igx_grid_excel_add_to_filter
            };
            this._addToCurrentFilter = addToCurrentFilterItem;
        }
        return this._addToCurrentFilter;
    }
    /**
     * @hidden @internal
     */
    get isLoading() {
        return this._isLoading;
    }
    /**
     * @hidden @internal
     */
    set isLoading(value) {
        this._isLoading = value;
        if (!this.cdr.destroyed) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @hidden @internal
     */
    get valuesLoadingTemplate() {
        var _a;
        if ((_a = this.esf.grid) === null || _a === void 0 ? void 0 : _a.excelStyleLoadingValuesTemplateDirective) {
            return this.esf.grid.excelStyleLoadingValuesTemplateDirective.template;
        }
        else {
            return this.defaultExcelStyleLoadingValuesTemplate;
        }
    }
    ngAfterViewInit() {
        this.refreshSize();
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden @internal
     */
    refreshSize() {
        requestAnimationFrame(() => {
            var _a;
            (_a = this.virtDir) === null || _a === void 0 ? void 0 : _a.recalcUpdateSizes();
        });
    }
    /**
     * @hidden @internal
     */
    clearInput() {
        this.searchValue = null;
        this.filterListData();
    }
    /**
     * @hidden @internal
     */
    onCheckboxChange(eventArgs) {
        const selectedIndex = this.displayedListData.indexOf(eventArgs.checkbox.value);
        const selectAllBtn = this.displayedListData[0];
        if (selectedIndex === 0) {
            this.displayedListData.forEach(element => {
                if (element === this.addToCurrentFilter) {
                    return;
                }
                element.isSelected = eventArgs.checked;
            });
            selectAllBtn.indeterminate = false;
        }
        else {
            eventArgs.checkbox.value.isSelected = eventArgs.checked;
            const indexToStartSlicing = this.displayedListData.indexOf(this.addToCurrentFilter) > -1 ? 2 : 1;
            const slicedArray = this.displayedListData.slice(indexToStartSlicing, this.displayedListData.length);
            if (!slicedArray.find(el => el.isSelected === false)) {
                selectAllBtn.indeterminate = false;
                selectAllBtn.isSelected = true;
            }
            else if (!slicedArray.find(el => el.isSelected === true)) {
                selectAllBtn.indeterminate = false;
                selectAllBtn.isSelected = false;
            }
            else {
                selectAllBtn.indeterminate = true;
            }
        }
        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();
    }
    /**
     * @hidden @internal
     */
    get itemSize() {
        let itemSize = '40px';
        switch (this.esf.displayDensity) {
            case DisplayDensity.cosy:
                itemSize = '32px';
                break;
            case DisplayDensity.compact:
                itemSize = '24px';
                break;
            default: break;
        }
        return itemSize;
    }
    /**
     * @hidden @internal
     */
    get type() {
        var _a;
        switch ((_a = this.esf.column) === null || _a === void 0 ? void 0 : _a.dataType) {
            case DataType.Number:
                return 'number';
            default:
                return 'text';
        }
    }
    /**
     * @hidden @internal
     */
    get containerSize() {
        if (this.list) {
            return this.list.element.nativeElement.offsetHeight;
        }
    }
    /**
     * @hidden @internal
     */
    get applyButtonDisabled() {
        return this.esf.listData[0] && !this.esf.listData[0].isSelected && !this.esf.listData[0].indeterminate ||
            this.displayedListData && this.displayedListData.length === 0;
    }
    /**
     * @hidden @internal
     */
    onInputKeyDown(event) {
        switch (event.key) {
            case "Enter" /* ENTER */:
                event.preventDefault();
                this.applyFilter();
                return;
            case "Escape" /* ESCAPE */ || "Esc" /* ESCAPE_IE */:
                if (this.searchValue) {
                    event.stopPropagation();
                    this.clearInput();
                }
                return;
        }
    }
    /**
     * @hidden @internal
     */
    filterListData() {
        if (!this.esf.listData || !this.esf.listData.length) {
            this.displayedListData = [];
            return;
        }
        const searchAllBtn = this.esf.listData[0];
        if (!this.searchValue) {
            const anyFiltered = this.esf.listData.some(i => i.isFiltered);
            const anyUnfiltered = this.esf.listData.some(i => !i.isFiltered);
            if (anyFiltered && anyUnfiltered) {
                searchAllBtn.indeterminate = true;
            }
            this.esf.listData.forEach(i => i.isSelected = i.isFiltered);
            this.displayedListData = this.esf.listData;
            searchAllBtn.label = this.esf.grid.resourceStrings.igx_grid_excel_select_all;
            return;
        }
        const searchVal = this.searchValue.toLowerCase();
        this.displayedListData = this.esf.listData.filter((it, i) => (i === 0 && it.isSpecial) ||
            (it.label !== null && it.label !== undefined) &&
                !it.isBlanks &&
                it.label.toString().toLowerCase().indexOf(searchVal) > -1);
        this.esf.listData.forEach(i => i.isSelected = false);
        this.displayedListData.forEach(i => i.isSelected = true);
        this.displayedListData.splice(1, 0, this.addToCurrentFilter);
        searchAllBtn.indeterminate = false;
        searchAllBtn.label = this.esf.grid.resourceStrings.igx_grid_excel_select_all_search_results;
        if (this.displayedListData.length === 2) {
            this.displayedListData = [];
        }
    }
    /**
     * @hidden @internal
     */
    applyFilter() {
        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.esf.column.field);
        const item = this.displayedListData[1];
        const addToCurrentFilterOptionVisible = item === this.addToCurrentFilter;
        const selectedItems = addToCurrentFilterOptionVisible && item.isSelected ?
            this.esf.listData.slice(1, this.esf.listData.length).filter(el => el.isSelected || el.isFiltered) :
            this.esf.listData.slice(1, this.esf.listData.length).filter(el => el.isSelected);
        const unselectedItem = this.esf.listData.slice(1, this.esf.listData.length).find(el => el.isSelected === false);
        if (unselectedItem) {
            if (selectedItems.length <= IgxExcelStyleSearchComponent.filterOptimizationThreshold) {
                selectedItems.forEach(element => {
                    let condition = null;
                    if (element.value !== null && element.value !== undefined) {
                        if (this.esf.column.dataType === DataType.Boolean) {
                            condition = this.createCondition(element.value.toString());
                        }
                        else {
                            condition = this.createCondition('equals');
                        }
                    }
                    else {
                        condition = this.createCondition('empty');
                    }
                    filterTree.filteringOperands.push({
                        condition: condition,
                        fieldName: this.esf.column.field,
                        ignoreCase: this.esf.column.filteringIgnoreCase,
                        searchVal: element.value
                    });
                });
            }
            else {
                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);
                let blanksItem;
                if (blanksItemIndex >= 0) {
                    blanksItem = selectedItems[blanksItemIndex];
                    selectedItems.splice(blanksItemIndex, 1);
                }
                filterTree.filteringOperands.push({
                    condition: this.createCondition('in'),
                    fieldName: this.esf.column.field,
                    ignoreCase: this.esf.column.filteringIgnoreCase,
                    searchVal: new Set(this.esf.column.dataType === DataType.Date ?
                        selectedItems.map(d => d.value.toISOString()) :
                        selectedItems.map(e => e.value))
                });
                if (blanksItem) {
                    filterTree.filteringOperands.push({
                        condition: this.createCondition('empty'),
                        fieldName: this.esf.column.field,
                        ignoreCase: this.esf.column.filteringIgnoreCase,
                        searchVal: blanksItem.value
                    });
                }
            }
            this.esf.grid.filteringService.filterInternal(this.esf.column.field, filterTree);
            this.esf.expressionsList = new Array();
            this.esf.grid.filteringService.generateExpressionsList(this.esf.column.filteringExpressionsTree, this.esf.grid.filteringLogic, this.esf.expressionsList);
        }
        else {
            this.esf.grid.filteringService.clearFilter(this.esf.column.field);
        }
        this.esf.closeDropdown();
    }
    createCondition(conditionName) {
        switch (this.esf.column.dataType) {
            case DataType.Boolean:
                return IgxBooleanFilteringOperand.instance().condition(conditionName);
            case DataType.Number:
                return IgxNumberFilteringOperand.instance().condition(conditionName);
            case DataType.Date:
                return IgxDateFilteringOperand.instance().condition(conditionName);
            default:
                return IgxStringFilteringOperand.instance().condition(conditionName);
        }
    }
}
IgxExcelStyleSearchComponent.filterOptimizationThreshold = 2;
IgxExcelStyleSearchComponent.decorators = [
    { type: Component, args: [{
                preserveWhitespaces: false,
                selector: 'igx-excel-style-search',
                template: "<igx-input-group\n            type=\"box\"\n            [displayDensity]=\"esf.displayDensity\">\n    <igx-icon igxPrefix>search</igx-icon>\n    <input\n        #input\n        igxInput\n        tabindex=\"0\"\n        [(ngModel)]=\"searchValue\"\n        (ngModelChange)=\"filterListData()\"\n        (keydown)=\"onInputKeyDown($event)\"\n        [placeholder]=\"esf.column?.grid.resourceStrings.igx_grid_excel_search_placeholder\"\n        [type]=\"type\"\n        autocomplete=\"off\"/>\n    <igx-icon\n        igxSuffix\n        *ngIf=\"searchValue || searchValue === 0\"\n        (click)=\"clearInput()\"\n        tabindex=\"0\">\n        clear\n    </igx-icon>\n</igx-input-group>\n\n<igx-list #list [displayDensity]=\"esf.displayDensity\" [isLoading]=\"isLoading\">\n    <div [style.overflow]=\"'hidden'\" [style.position]=\"'relative'\">\n        <igx-list-item\n        *igxFor=\"let item of displayedListData scrollOrientation : 'vertical'; containerSize: containerSize; itemSize: itemSize\">\n            <igx-checkbox\n            [value]=\"item\"\n            tabindex=\"-1\"\n            [checked]=\"item.isSelected\"\n            [disableRipple]=\"true\"\n            [indeterminate]=\"item.indeterminate\"\n            [disableTransitions]=\"true\"\n            (change)=\"onCheckboxChange($event)\">\n                {{ item.label }}\n            </igx-checkbox>\n        </igx-list-item>\n    </div>\n\n    <ng-template igxDataLoading>\n        <div class=\"igx-excel-filter__loading\">\n            <ng-container *ngTemplateOutlet=\"valuesLoadingTemplate\">\n            </ng-container>\n        </div>\n    </ng-template>\n</igx-list>\n\n<ng-template #defaultExcelStyleLoadingValuesTemplate>\n    <igx-circular-bar [indeterminate]=\"true\">\n    </igx-circular-bar>\n</ng-template>\n\n<footer class=\"igx-excel-filter__menu-footer\">\n    <button igxButton [displayDensity]=\"esf.displayDensity\" (click)=\"esf.cancel()\">{{ esf.grid?.resourceStrings.igx_grid_excel_cancel }}</button>\n    <button igxButton=\"raised\" [displayDensity]=\"esf.displayDensity\" [disabled]=\"applyButtonDisabled\" (click)=\"applyFilter()\">{{ esf.grid?.resourceStrings.igx_grid_excel_apply }}</button>\n</footer>\n"
            },] }
];
IgxExcelStyleSearchComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: IgxGridExcelStyleFilteringComponent }
];
IgxExcelStyleSearchComponent.propDecorators = {
    class: [{ type: HostBinding, args: ['class',] }],
    searchInput: [{ type: ViewChild, args: ['input', { read: IgxInputDirective, static: true },] }],
    list: [{ type: ViewChild, args: ['list', { read: IgxListComponent, static: true },] }],
    virtDir: [{ type: ViewChild, args: [IgxForOfDirective, { static: true },] }],
    defaultExcelStyleLoadingValuesTemplate: [{ type: ViewChild, args: ['defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef },] }]
};
//# sourceMappingURL=data:application/json;base64,